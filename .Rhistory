n.diff <- length(dat.finches$diff)
resamples.diff <-  tibble(tstat=rep(NA, R),
xbar=rep(NA, R))
for(i in 1:R){
curr.resample <- sample(x = dat.finches$diff,
size = n.diff,
replace = T)
resamples.diff$tstat[i] <- (mean(curr.resample)-0)/(s.diff/sqrt(n.diff))
resamples.further$xbar[i] <- mean(curr.resample)
}
# shift so H0 is true
delta.diff <- mean(resamples.diff$tstat) - 0 # null mu0 = 0
resamples.null.diff <- resamples.diff |>
mutate(tstat.shifted = tstat - delta.diff)
# Bootstrap P-Value
p.boot.closer <- mean(resamples.null.closer$tstat.shifted >= delta.closer)
# T-Test P-Value
p.t.closer <- t.test(dat.finches$closer,
mu = 0,
alternative = "greater")
p.t.closer <- p.t.closer$p.value
## Further ##
# Bootstrap P-Value
p.boot.further <- mean(resamples.null.further$tstat.shifted <= delta.further)
# T-Test P-Value
p.t.further <- t.test(dat.finches$further,
mu = 0,
alternative = "less")
p.t.further <- p.t.further$p.value
## Difference ##
# Bootstrap P-Value
low <- 0 - delta.diff
high <- 0 + delta.diff
p.low <- mean(resamples.null.diff$tstat.shifted <= low)
p.high <- mean(resamples.null.diff$tstat.shifted >= high)
p.boot.diff <- p.low + p.high
# T-Test P-Value
p.t.diff <- t.test(dat.finches$diff,
mu = 0,
alternative = "two.sided")
p.t.diff <- p.t.diff$p.value
comparison.pvals <- tibble(
Data = c("Closer", "Further", "Difference"),
`Bootstrap P-value` = c(p.boot.closer,
p.boot.further,
p.boot.diff),
`T-Test P-value` = c(p.t.closer,
p.t.further,
p.t.diff)
)
view(comparison.pvals)
p.boot.closer
# Bootstrap P-Value
p.boot.closer <- mean(resamples.null.closer$tstat.shifted >= delta.closer)
p.boot.closer
# Closer Resamples
R <- 10000
s.closer <- sd(dat.finches$closer)
n.closer <- length(dat.finches$closer)
resamples.closer <-  tibble(tstat=rep(NA, R),
xbar=rep(NA, R))
for(i in 1:R){
curr.resample <- sample(x = dat.finches$closer,
size = n.closer,
replace = T)
resamples.closer$tstat[i] <- (mean(curr.resample)-0)/(s.closer/sqrt(n.closer))
resamples.closer$xbar[i] <- mean(curr.resample)
}
delta.closer <- mean(resamples.closer$tstat) - 0 # null mu0 = 0
resamples.null.closer <- resamples.closer |>
mutate(tstat.shifted = tstat - delta.closer)
# Further Resamples
R <- 10000
s.further <- sd(dat.finches$further)
n.further <- length(dat.finches$further)
resamples.further <- tibble(tstat=rep(NA, R),
xbar=rep(NA, R))
for(i in 1:R){
curr.resample <- sample(x = dat.finches$further,
size = n.further,
replace = T)
resamples.further$tstat[i] <- (mean(curr.resample)-0)/(s.further/sqrt(n.further))
resamples.further$xbar[i] <- mean(curr.resample)
}
# shift so H0 is true
delta.further <- mean(resamples.further$tstat) - 0 # null mu0 = 0
resamples.null.further <- resamples.further |>
mutate(tstat.shifted = tstat - delta.further)
# Difference Resamples
R <- 10000
s.diff <- sd(dat.finches$diff)
n.diff <- length(dat.finches$diff)
resamples.diff <-  tibble(tstat=rep(NA, R),
xbar=rep(NA, R))
for(i in 1:R){
curr.resample <- sample(x = dat.finches$diff,
size = n.diff,
replace = T)
resamples.diff$tstat[i] <- (mean(curr.resample)-0)/(s.diff/sqrt(n.diff))
resamples.diff$xbar[i] <- mean(curr.resample)
}
# shift so H0 is true
delta.diff <- mean(resamples.diff$tstat) - 0 # null mu0 = 0
resamples.null.diff <- resamples.diff |>
mutate(tstat.shifted = tstat - delta.diff)
# Bootstrap P-Value
p.boot.closer <- mean(resamples.null.closer$tstat.shifted >= delta.closer)
# T-Test P-Value
p.t.closer <- t.test(dat.finches$closer,
mu = 0,
alternative = "greater")
p.t.closer <- p.t.closer$p.value
## Further ##
# Bootstrap P-Value
p.boot.further <- mean(resamples.null.further$tstat.shifted <= delta.further)
# T-Test P-Value
p.t.further <- t.test(dat.finches$further,
mu = 0,
alternative = "less")
p.t.further <- p.t.further$p.value
## Difference ##
# Bootstrap P-Value
low <- 0 - delta.diff
high <- 0 + delta.diff
p.low <- mean(resamples.null.diff$tstat.shifted <= low)
p.high <- mean(resamples.null.diff$tstat.shifted >= high)
p.boot.diff <- p.low + p.high
# T-Test P-Value
p.t.diff <- t.test(dat.finches$diff,
mu = 0,
alternative = "two.sided")
p.t.diff <- p.t.diff$p.value
comparison.pvals <- tibble(
Data = c("Closer", "Further", "Difference"),
`Bootstrap P-value` = c(p.boot.closer,
p.boot.further,
p.boot.diff),
`T-Test P-value` = c(p.t.closer,
p.t.further,
p.t.diff)
)
view(comparison.pvals)
resamples.null.diff
################# Part D ###################
# Confidence Interval
### use resamples for boot -- need this for x bar (floruorences)
# want to use resample x bars (not shifted) for the confidence interval
# Closer
quantile(resamples.null.closer$xbar, c(0.025, 0.975))
# Further
quantile(resamples.null.further$xbar, c(0.025, 0.975))
# Diff
quantile(resamples.null.diff$xbar, c(0.025, 0.975))
CI.t.closer <- t.test(x=dat.finches$closer, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.closer
CI.boot.closer
################# Part D ###################
# Confidence Interval
### use resamples for boot -- need this for x bar (floruorences)
# want to use resample x bars (not shifted) for the confidence interval
# Closer
CI.boot.closer <- quantile(resamples.null.closer$xbar, c(0.025, 0.975))
CI.boot.closer
################# Part D ###################
# Confidence Interval
### use resamples for boot -- need this for x bar (floruorences)
# want to use resample x bars (not shifted) for the confidence interval
# Closer
CI.boot.closer <- quantile(resamples.null.closer$xbar, c(0.025, 0.975))
CI.t.closer <- t.test(x=dat.finches$closer, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.closer <- c(CI.t.closer$conf.int[1],
CI.t.closer$conf.int[2])
CI.t.closer
CI.boot.further
# Further
CI.boot.further <- quantile(resamples.null.further$xbar, c(0.025, 0.975))
CI.t.further <- t.test(x=dat.finches$further, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.further <- c(CI.t.further$conf.int[1],
CI.t.further$conf.int[2])
# Diff
CI.boot.further <- quantile(resamples.null.diff$xbar, c(0.025, 0.975))
CI.t.diff <- t.test(x=dat.finches$diff, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.diff <- c(CI.t.diff$conf.int[1],
CI.t.diff$conf.int[2])
comparison.CI <- tibble(
Data = c("Closer", "Further", "Difference"),
`Bootstrap Confidence Interval` = c(CI.boot.closer,
CI.boot.further,
CI.boot.further),
`T-Test  Confidence Interval` = c(CI.t.closer,
CI.t.further,
CI.t.diff)
)
################# Part D ###################
# Confidence Interval
### use resamples for boot -- need this for x bar (floruorences)
# want to use resample x bars (not shifted) for the confidence interval
# Closer
CI.boot.closer <- quantile(resamples.null.closer$xbar, c(0.025, 0.975))
CI.t.closer <- t.test(x=dat.finches$closer, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.closer <- CI.t.closer$conf.int
# Further
CI.boot.further <- quantile(resamples.null.further$xbar, c(0.025, 0.975))
CI.t.further <- t.test(x=dat.finches$further, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.further <- CI.t.further$conf.int
# Diff
CI.boot.further <- quantile(resamples.null.diff$xbar, c(0.025, 0.975))
CI.t.diff <- t.test(x=dat.finches$diff, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.diff <- CI.t.diff$conf.int
comparison.CI <- tibble(
Data = c("Closer", "Further", "Difference"),
`Bootstrap Confidence Interval` = c(CI.boot.closer,
CI.boot.further,
CI.boot.further),
`T-Test  Confidence Interval` = c(CI.t.closer,
CI.t.further,
CI.t.diff)
)
view(comparison.CI)
comparison.CI <- tibble(
Data = c("Closer", "Further", "Difference"),
`Bootstrap Confidence Interval` = c(CI.boot.closer,
CI.boot.further,
CI.boot.further),
`T-Test  Confidence Interval` = c(CI.t.closer,
CI.t.further,
CI.t.diff)
)
CI.t.diff
CI.t.diff
CI.t.diff
CI.t.diff
CI.boot.closer
CI.boot.closer[1]
comparison.CI <- tibble(
Data = c("Closer", "Further", "Difference"),
`Bootstrap Confidence Interval` = c(CI.boot.closer,
CI.boot.further,
CI.boot.further),
`T-Test  Confidence Interval` = c(CI.t.closer,
CI.t.further,
CI.t.diff)
)
################# Part D ###################
# Confidence Interval
### use resamples for boot -- need this for x bar (floruorences)
# want to use resample x bars (not shifted) for the confidence interval
# Closer
CI.boot.closer <- quantile(resamples.null.closer$xbar, c(0.025, 0.975))
CI.t.closer <- t.test(x=dat.finches$closer, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.closer <- CI.t.closer$conf.int
# Further
CI.boot.further <- quantile(resamples.null.further$xbar, c(0.025, 0.975))
CI.t.further <- t.test(x=dat.finches$further, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.further <- CI.t.further$conf.int
# Diff
CI.boot.further <- quantile(resamples.null.diff$xbar, c(0.025, 0.975))
CI.t.diff <- t.test(x=dat.finches$diff, mu = 0, conf.level = 0.95, alternative = "two.sided")
CI.t.diff <- CI.t.diff$conf.int
CI.boot.further
CI.t.diff
#### Part A ####
# Since we do not know the generating distribution for closer, furhter, and difference data
# We need to preform randomization procedure.
mu0 <- 0
R <- 10000
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$closer - mu0
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu0) # shifting back
# p-value
(delta <- abs(mean(dat.finches$closer) - mu0))
(low <- mu0 - delta) # mirror
(high<- mu0 + delta)   # xbar
p.rand.closer <- mean(rand$xbars <= low) + mean(rand$xbars >= high)
p.rand.closer <- mean(rand.closer$xbars <= low) + mean(rand.closer$xbars >= high)
p.rand.closer
#### Closer ####
# Since we do not know the generating distribution for closer, furhter, and difference data
# We need to preform randomization procedure.
mu0 <- 0
R <- 10000
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$closer - mu0
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu0) # shifting back
# p-value
(delta.closer <- abs(mean(dat.finches$closer) - mu0))
(low.closer <- mu0 - delta.closer) # mirror
(high.closer <- mu0 + delta.closer)   # xbar
p.rand.closer <- mean(rand.closer$xbars <= low.closer) +
mean(rand.closer$xbars >= high.closer)
p.rand.closer
## Confidence Interval ##
R <- 1000
mu0.iterate <- 0.01
starting.point.closer <- mean(dat.finches$closer)
starting.point.closer
mu.lower.closer <- starting.point.closer
repeat{
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$close - mu.lower.closer
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu.lower.closer) # shifting back
# p-value
(delta.closer <- abs(mean(dat.finches$closer) - mu.lower.closer))
(low.closer <- mu.lower.closer - delta.closer) # mirror
(high.closer <- mu.lower.closer + delta.closer)   # xbar
(p.val.closer <- mean(rand$xbars <= low.closer) +
mean(rand$xbars >= high.closer))
if(p.val.closer < 0.05){
break
}else{
mu.lower.closer <- mu.lower.closer - mu0.iterate
}
}
mu.lower.closer <- starting.point.closer
repeat{
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$close - mu.lower.closer
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu.lower.closer) # shifting back
# p-value
(delta.closer <- abs(mean(dat.finches$closer) - mu.lower.closer))
(low.closer <- mu.lower.closer - delta.closer) # mirror
(high.closer <- mu.lower.closer + delta.closer)   # xbar
(p.val.closer <- mean(rand.closer$xbars <= low.closer) +
mean(rand.closer$xbars >= high.closer))
if(p.val.closer < 0.05){
break
}else{
mu.lower.closer <- mu.lower.closer - mu0.iterate
}
}
mu.upper.closer <- starting.point
mu.upper.closer <- starting.point.closer
mu.upper.closer
repeat{
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$close - mu.lower.closer
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu.lower.closer) # shifting back
# p-value
(delta.closer <- abs(mean(dat.finches$closer) - mu.lower.closer))
(low.closer <- mu.lower.closer - delta.closer) # mirror
(high.closer <- mu.lower.closer + delta.closer)   # xbar
(p.val.closer <- mean(rand.closer$xbars <= low.closer) +
mean(rand.closer$xbars >= high.closer))
if(p.val < 0.05){
break
}else{
mu.upper.closer <- mu.upper.closer + mu0.iterate
}
}
repeat{
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$close - mu.lower.closer
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu.lower.closer) # shifting back
# p-value
(delta.closer <- abs(mean(dat.finches$closer) - mu.lower.closer))
(low.closer <- mu.lower.closer - delta.closer) # mirror
(high.closer <- mu.lower.closer + delta.closer)   # xbar
(p.val.closer <- mean(rand.closer$xbars <= low.closer) +
mean(rand.closer$xbars >= high.closer))
if(p.val.closer < 0.05){
break
}else{
mu.upper.closer <- mu.upper.closer + mu0.iterate
}
}
c(mu.lower.closer, mu.upper.closer)
# p-value
obs.mean.closer <- mean(dat.finches$closer)
p.rand.closer <- mean(rand.closer$xbars >= obs.mean.closer)
p.rand.closer
################################################################################
# Closer (#3)
################################################################################# Since we do not know the generating distribution for closer, furhter, and difference data
# We need to preform randomization procedure.
mu0 <- 0
R <- 10000
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$closer - mu0
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu0) # shifting back
# p-value
obs.mean.closer <- mean(dat.finches$closer)
p.rand.closer <- mean(rand.closer$xbars >= obs.mean.closer)
## Confidence Interval ##
R <- 1000
mu0.iterate <- 0.01
starting.point.closer <- mean(dat.finches$closer)
mu.lower.closer <- starting.point.closer
repeat{
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$close - mu.lower.closer
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu.lower.closer) # shifting back
# p-value  (one-sided)
obs.mean.closer <- mean(dat.finches$closer)
p.val.closer <- mean(rand.closer$xbars >= obs.mean.closer)
if(p.val.closer < 0.05){
break
}else{
mu.lower.closer <- mu.lower.closer - mu0.iterate
}
}
mu.upper.closer <- starting.point.closer
repeat{
rand.closer <- tibble(xbars = rep(NA, R))
# PREPROCESSING: shift the data to be mean 0 under H0
x.shift.closer <- dat.finches$close - mu.lower.closer
# RANDOMIZE / SHUFFLE
for(i in 1:R){
curr.rand <- x.shift.closer *
sample(x = c(-1, 1),
size = length(x.shift.closer),
replace = T)
rand.closer$xbars[i] <- mean(curr.rand)
}
# Thinking is hard
rand.closer <- rand.closer |>
mutate(xbars = xbars + mu.lower.closer) # shifting back
# p-value  (one-sided)
obs.mean.closer <- mean(dat.finches$closer)
p.val.closer <- mean(rand.closer$xbars >= obs.mean.closer)
if(p.val.closer < 0.05){
break
}else{
mu.upper.closer <- mu.upper.closer + mu0.iterate
}
}
c(mu.lower.closer, mu.upper.closer)
